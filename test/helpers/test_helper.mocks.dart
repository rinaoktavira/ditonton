// Mocks generated by Mockito 5.0.8 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:convert';
import 'dart:typed_data';

import 'package:dartz/dartz.dart';
import 'package:ditonton/common/failure.dart';
import 'package:ditonton/data/datasources/db/database_helper.dart';
import 'package:ditonton/data/datasources/movie_local_data_source.dart';
import 'package:ditonton/data/datasources/movie_remote_data_source.dart';
import 'package:ditonton/data/models/movie_detail_model.dart';
import 'package:ditonton/data/models/movie_model.dart';
import 'package:ditonton/data/models/movie_table.dart';
import 'package:ditonton/domain/entities/movie.dart';
import 'package:ditonton/domain/entities/movie_detail.dart';
import 'package:ditonton/domain/repositories/movie_repository.dart';
import 'package:http/src/base_request.dart';
import 'package:http/src/client.dart';
import 'package:http/src/response.dart';
import 'package:http/src/streamed_response.dart';
import 'package:mockito/mockito.dart';
import 'package:sqflite_common/sqlite_api.dart';

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends Fake implements Either<L, R> {}

class _FakeMovieDetailResponse extends Fake implements MovieDetailResponse {}

class _FakeResponse extends Fake implements Response {}

class _FakeStreamedResponse extends Fake implements StreamedResponse {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends Mock implements MovieRepository {
  MockMovieRepository() {
    throwOnMissingStub(this);
  }

  @override
  _i7.Future<Either<Failure, List<Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
  @override
  _i7.Future<Either<Failure, List<Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
  @override
  _i7.Future<Either<Failure, List<Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
  @override
  _i7.Future<Either<Failure, MovieDetail>> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<Either<Failure, MovieDetail>>.value(
                  _FakeEither<Failure, MovieDetail>()))
          as _i7.Future<Either<Failure, MovieDetail>>);
  @override
  _i7.Future<Either<Failure, List<Movie>>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
  @override
  _i7.Future<Either<Failure, List<Movie>>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
  @override
  _i7.Future<Either<Failure, String>> saveWatchlist(MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<Either<Failure, String>>.value(
                  _FakeEither<Failure, String>()))
          as _i7.Future<Either<Failure, String>>);
  @override
  _i7.Future<Either<Failure, String>> removeWatchlist(MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<Either<Failure, String>>.value(
                  _FakeEither<Failure, String>()))
          as _i7.Future<Either<Failure, String>>);
  @override
  _i7.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<Either<Failure, List<Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as _i7.Future<Either<Failure, List<Movie>>>);
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends Mock implements MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue: Future<List<MovieModel>>.value(<MovieModel>[]))
          as _i7.Future<List<MovieModel>>);
  @override
  _i7.Future<List<MovieModel>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
              returnValue: Future<List<MovieModel>>.value(<MovieModel>[]))
          as _i7.Future<List<MovieModel>>);
  @override
  _i7.Future<List<MovieModel>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
              returnValue: Future<List<MovieModel>>.value(<MovieModel>[]))
          as _i7.Future<List<MovieModel>>);
  @override
  _i7.Future<MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue:
                  Future<MovieDetailResponse>.value(_FakeMovieDetailResponse()))
          as _i7.Future<MovieDetailResponse>);
  @override
  _i7.Future<List<MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue: Future<List<MovieModel>>.value(<MovieModel>[]))
          as _i7.Future<List<MovieModel>>);
  @override
  _i7.Future<List<MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue: Future<List<MovieModel>>.value(<MovieModel>[]))
          as _i7.Future<List<MovieModel>>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends Mock implements MovieLocalDataSource {
  MockMovieLocalDataSource() {
    throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> insertWatchlist(MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> removeWatchlist(MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
          returnValue: Future<MovieTable?>.value()) as _i7.Future<MovieTable?>);
  @override
  _i7.Future<List<MovieTable>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<MovieTable>>.value(<MovieTable>[]))
          as _i7.Future<List<MovieTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends Mock implements DatabaseHelper {
  MockDatabaseHelper() {
    throwOnMissingStub(this);
  }

  @override
  _i7.Future<Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: Future<Database?>.value()) as _i7.Future<Database?>);
  @override
  _i7.Future<int> insertWatchlist(MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> removeWatchlist(MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i7.Future<Map<String, dynamic>?>);
  @override
  _i7.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i7.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends Mock implements Client {
  MockHttpClient() {
    throwOnMissingStub(this);
  }

  @override
  _i7.Future<Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<Response> post(Uri? url,
          {Map<String, String>? headers, Object? body, Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<Response> put(Uri? url,
          {Map<String, String>? headers, Object? body, Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<Response> patch(Uri? url,
          {Map<String, String>? headers, Object? body, Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<Response> delete(Uri? url,
          {Map<String, String>? headers, Object? body, Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<Response>.value(_FakeResponse()))
          as _i7.Future<Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<Uint8List> readBytes(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<Uint8List>.value(Uint8List(0)))
          as _i7.Future<Uint8List>);
  @override
  _i7.Future<StreamedResponse> send(BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<StreamedResponse>.value(_FakeStreamedResponse()))
          as _i7.Future<StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
